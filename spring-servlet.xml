<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx 
 		http://www.springframework.org/schema/tx/spring-tx.xsd 
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
        
	<!--  add support for component scan -->
	<context:component-scan base-package="com.crm" />
	
	<!--  aspectj auto proxy -->
	<aop:aspectj-autoproxy/>

	<!-- add support for conversion, formatting and validations - MVC -->
	<mvc:annotation-driven />
	
	<!-- add support for views in MVC-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/" />
        <property name="suffix" value=".jsp" />
	</bean>
	
		<!-- Step-1: (SPRING + HIBERNATE) Define connection pool. Connection pooling is an operation
		 in which a system pre-initializes the connections to be used in the future.
		 This is done since creating connections at the time of use is an expensive operation.-->
		 
	    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
        destroy-method="close">
        <property name="driverClass" value="oracle.jdbc.OracleDriver" />
        <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521/orclpdb" />
        <property name="user" value="Albert" />
        <property name="password" value="Albert" />
        <property name="maxPoolSize" value="20" />
        <property name="minPoolSize" value="5" />
        <property name="maxIdleTime" value="30000" />
   		</bean>
    
    	<!-- Step-2: (SPRING + HIBERNATE) Set up HIBERNATE session factory-->
	    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
	    <property name="dataSource" ref="dataSource"/>
	    <property name="packagesToScan" value="com.crm.entity"/>
	    <property name="hibernateProperties">
			 <props>
	    	 <prop key="hibernate.dialect">org.hibernate.dialect.Oracle12cDialect</prop> 
	     	 <prop key="hibernate.show_sql">true</prop> 
		     </props>
	  	</property>
	 	</bean>
	 	
	 	 <!-- Step-2: (SPRING + HIBERNATE) Set up HIBERNATE Transaction manager-->
	 	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		</bean>
	
	
	<!-- Step-2: (SPRING + HIBERNATE) Enable Annotation based Declarative Transaction Management -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- Add support for resources -->
	<mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>

</beans>